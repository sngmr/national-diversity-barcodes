{"version":3,"sources":["FlagsData.js","ImageDetermine.js","SelectFlags.js","App.js","index.js"],"names":["createFlagsDataInstance","getAllNationalFlags","axios","get","getImageColorData","canvas","pixelCount","width","height","countedColorDataObject","quality","pixels","offset","r","g","b","pixelArray","i","push","createPixelArray","getContext","getImageData","data","getImagePixelArrayFromCanvas","map","rgbList","value","toString","slice","join","reduce","total","Object","entries","color","count","sort","a","filter","v","SelectFlags","useState","flagsData","setFlagsData","selectedFlagsData","setSelectedFlagsData","selectedFlagsColorData","setSelectedFlagsColorData","useEffect","FlagsData","then","console","log","forEach","flagData","document","getElementById","alpha3Code","ctx","Canvg","from","flag","canvg","render","style","border","createCountryTr","isSelected","indexOf","onClick","className","name","overflowY","newSelectedFlagsColorData","colorData","marginLeft","id","flagDataAndColorData","backgroundColor","margin","marginBottom","App","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.b98afb4e.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst createFlagsDataInstance = function() {\n    return {\n        async getAllNationalFlags() {\n            return await axios.get('https://restcountries.eu/rest/v2/all');\n        }\n    }\n}\n\nexport default createFlagsDataInstance();\n","export function getImageColorData(canvas) {\n    const quality = 10;\n    const filterRate = 0.025 / quality;\n    \n    // Retrieve all pixel's color information from image\n    const pixelCount = canvas.width * canvas.height;\n    const allPixelColorList = getImagePixelArrayFromCanvas(canvas, pixelCount, quality);\n    \n    // Convert [r, g, b] to #000000 array\n    const allPixelColorNameList = allPixelColorList.map((rgbList) => rgb2hex(rgbList));\n    \n    // Grouped and count each colors\n    const countedColorDataObject = allPixelColorNameList.reduce((total, value) => {\n        total[value] = (total[value] || 0) + 1;\n        return total;\n    }, {});\n    const countedColorDataList = Object.entries(countedColorDataObject).map(([color, count]) => ({color, count}))\n    \n    // Sort\n    const countedColorDataListSorted = countedColorDataList.sort((a, b) => {\n        return b.count - a.count;\n    });\n    // console.log(countedColorDataListSorted);\n    // console.log(pixelCount);\n    \n    // Filter at least N% of area that color draw\n    return countedColorDataListSorted.filter(v => v.count >= pixelCount * filterRate);\n}\n\nfunction getImagePixelArrayFromCanvas(canvas, pixelCount, quality) {\n    const ctx = canvas.getContext('2d');\n    const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    return createPixelArray(imgData.data, pixelCount, quality);\n}\n\nfunction createPixelArray(pixels, pixelCount, quality) {\n    const pixelArray = [];\n    \n    for (let i = 0, offset, r, g, b, a; i < pixelCount; i = i + quality) {\n        offset = i * 4;\n        r = pixels[offset + 0];\n        g = pixels[offset + 1];\n        b = pixels[offset + 2];\n        a = pixels[offset + 3]; // Unused because flag has no opaque... I think\n        \n        pixelArray.push([r, g, b]);\n    }\n    return pixelArray;\n}\n\nfunction rgb2hex(rgb) {\n    return \"#\" + rgb.map(function (value) {\n        return (\"0\" + value.toString(16)).slice(-2);\n    }).join(\"\");\n}\n","import { useState, useEffect } from \"react\";\nimport Canvg from 'canvg';\nimport FlagsData from \"./FlagsData\";\nimport {getImageColorData} from \"./ImageDetermine\";\n\nfunction SelectFlags() {\n    const [flagsData, setFlagsData] = useState([]);\n    const [selectedFlagsData, setSelectedFlagsData] = useState([]);\n    const [selectedFlagsColorData, setSelectedFlagsColorData] = useState([]);\n    \n    // When page load complete\n    useEffect(() => {\n        FlagsData.getAllNationalFlags().then((data) => {\n            setFlagsData(data.data);\n        });\n    }, []);\n    \n    // When selected flags\n    useEffect(() => {\n        console.log(selectedFlagsData);\n    \n        // Draw flag SVG image to the canvas for image manipulating\n        selectedFlagsData.forEach((flagData) => {\n            const canvas = document.getElementById('canvas_' + flagData.alpha3Code);\n            const ctx = canvas.getContext('2d');\n            Canvg.from(ctx, flagData.flag).then((canvg) => {\n                canvg.render().then(() => {\n                    // Modify display size based on the canvas (=svg) size\n                    canvas.style.width = \"120px\";\n                    canvas.style.height = (canvas.height * 120 / canvas.width) + 'px';\n                    canvas.style.border = \"1px solid gray\";\n                });\n            });\n        });\n    }, [selectedFlagsData]);\n    \n    // Create TR country node\n    const createCountryTr = (flagData) => {\n        // When countries table selected\n        const onCountryRowClick = () => {\n            if (selectedFlagsData.indexOf(flagData) >= 0) {\n                // Remove\n                setSelectedFlagsData(selectedFlagsData.filter(v => flagData !== v));\n            } else {\n                // Add\n                setSelectedFlagsData([...selectedFlagsData, flagData]);\n            }\n        }\n        \n        // Check if this country is in selected list\n        let isSelected = false;\n        if (selectedFlagsData.indexOf(flagData) >= 0) {\n            isSelected = true;\n        }\n    \n        return (\n            <tr key={flagData.alpha3Code}\n                onClick={() => { onCountryRowClick(); }}\n                className={isSelected ? 'is-selected' : ''}\n            >\n                <td>{flagData.name}</td>\n            </tr>\n        );\n    }\n    \n    const onAnalyzeColorsButtonPressed = () => {\n        const newSelectedFlagsColorData  = [];\n        selectedFlagsData.forEach((flagData) => {\n            newSelectedFlagsColorData.push({\n                flagData: flagData,\n                colorData: getImageColorData(document.getElementById('canvas_' + flagData.alpha3Code)),\n            });\n        });\n        setSelectedFlagsColorData(newSelectedFlagsColorData);\n    };\n    \n    return (\n        <div className=\"columns\">\n            <div className=\"column\">\n                <strong>Select countries</strong>\n                <div className=\"table-container\" style={{height:\"18rem\",overflowY:\"scroll\"}}>\n                    <table className=\"table is-bordered is-striped is-narrow is-hoverable\">\n                        <tbody>\n                        {flagsData.map((flagData) => { return createCountryTr(flagData) })}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            \n            <div className=\"column\">\n                <strong>Selected countries</strong>\n                <button\n                    onClick={onAnalyzeColorsButtonPressed}\n                    className=\"button is-small is-primary is-outlined\"\n                    style={{marginLeft:'10px'}}>Analyze colors -></button>\n                \n                {selectedFlagsData.map((flagData) =>\n                    <div key={\"selected_\" + flagData.alpha3Code}>\n                        <h4>{flagData.name}</h4>\n                        <canvas id={\"canvas_\" + flagData.alpha3Code} />\n                    </div>\n                )}\n            </div>\n            \n            <div className=\"column\">\n                <strong>Selected countries color data</strong>\n                {selectedFlagsColorData.map((flagDataAndColorData) =>\n                    <div key={\"selected_analyzed_\" + flagDataAndColorData.flagData.alpha3Code}>\n                        <h4>{flagDataAndColorData.flagData.name}</h4>\n                        <div>\n                            {flagDataAndColorData.colorData.map(colorData => (\n                                <div key={\"color_sample_\" + flagDataAndColorData.flagData.alpha3Code + \"_\" + colorData.color}>\n                                    <span style={{border:\"1px solid gray\", backgroundColor:colorData.color}}>&nbsp;&nbsp;&nbsp;&nbsp;</span>\n                                    <span> {colorData.color}, {colorData.count}px</span>\n                                </div>\n                            ))}\n                        </div>\n                        <hr style={{margin:0,marginBottom:'1rem'}}/>\n                    </div>\n                )}\n            </div>\n        </div>\n    );\n}\n\nexport default SelectFlags;\n","import SelectFlags from \"./SelectFlags\";\n\nfunction App() {\n    return (\n        <div>\n            <section className=\"hero is-dark\">\n                <div className=\"hero-body\">\n                    <div className=\"container\">\n                        <h1 className=\"title\">National Diversity Barcodes</h1>\n                    </div>\n                </div>\n            </section>\n            \n            <section className=\"section\">\n                <div className=\"container \">\n                    <SelectFlags/>\n                </div>\n            </section>\n    \n            <footer className=\"footer\">\n                <div className=\"content has-text-centered\">\n                    ConnectionWorks Inc.\n                </div>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.min.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}