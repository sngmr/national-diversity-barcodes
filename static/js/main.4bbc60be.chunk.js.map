{"version":3,"sources":["FlagsData.js","ImageDetermine.js","FlagGenerator.js","MashupFlags.js","App.js","index.js"],"names":["createFlagsDataInstance","getAllNationalFlags","axios","get","getImageColorData","canvas","pixelCount","width","height","countedColorDataObject","quality","pixels","offset","r","g","b","pixelArray","i","push","createPixelArray","getContext","getImageData","data","getImagePixelArrayFromCanvas","map","rgbList","value","toString","slice","join","reduce","total","Object","entries","color","count","area","sort","a","filter","v","SVG_WIDTH","SVG_HEIGHT","SVG_ROOT_TEMPLATE","name","type","attributes","xmlns","version","children","x","y","fill","SVG_RECT_TEMPLATE","generate1","isHorizontalBorder","colorList","colors","shuffle","toUpperCase","baseLength","whiteColorLen","length","eachColorLen","root","deepCopy","rect","svgson","generate2","flagAndColorDataList","colorAndAreaRateList","flagAndColorData","colorData","colorsTotalLen","totalArea","fillRate","colorLenTotal","colorLen","Math","round","tidyCanvasElement","style","border","org","JSON","parse","stringify","MashupFlags","useState","flagsData","setFlagsData","selectedFlagsData","setSelectedFlagsData","selectedFlagsColorData","setSelectedFlagsColorData","useEffect","FlagsData","then","forEach","flagData","document","getElementById","alpha3Code","ctx","Canvg","from","flag","canvg","render","FlagGen","createCountryTr","isSelected","indexOf","onClick","className","onGenerateFlagsButtonPressed","ReactGA","event","category","action","drawCanvas","canvasId","svg","overflowY","newSelectedFlagsColorData","ImageDetermine","id","flagDataAndColorData","backgroundColor","margin","marginBottom","initialize","pageview","window","location","pathname","search","App","ReactDOM","StrictMode"],"mappings":"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","file":"static/js/main.4bbc60be.chunk.js","sourcesContent":["import axios from \"axios\";\n\nconst createFlagsDataInstance = function() {\n    return {\n        async getAllNationalFlags() {\n            return await axios.get('https://restcountries.eu/rest/v2/all');\n        }\n    }\n}\n\nexport default createFlagsDataInstance();\n","export function getImageColorData(canvas) {\n    const quality = 10;\n    const filterRate = 0.025 / quality;\n    \n    // Retrieve all pixel's color information from image\n    const pixelCount = canvas.width * canvas.height;\n    const allPixelColorList = getImagePixelArrayFromCanvas(canvas, pixelCount, quality);\n    \n    // Convert [r, g, b] to #000000 array\n    const allPixelColorNameList = allPixelColorList.map((rgbList) => rgb2hex(rgbList));\n    \n    // Grouped and count each colors\n    const countedColorDataObject = allPixelColorNameList.reduce((total, value) => {\n        total[value] = (total[value] || 0) + 1;\n        return total;\n    }, {});\n    const countedColorDataList = Object.entries(countedColorDataObject).map(([color, count]) => {\n        const area = count / pixelCount * quality;\n        return {color, count, pixelCount, area}\n    });\n    \n    // Sort\n    const countedColorDataListSorted = countedColorDataList.sort((a, b) => {\n        return b.count - a.count;\n    });\n    // console.log(countedColorDataListSorted);\n    // console.log(pixelCount);\n    \n    // Filter at least N% of area that color draw\n    return countedColorDataListSorted.filter(v => v.count >= pixelCount * filterRate);\n}\n\nfunction getImagePixelArrayFromCanvas(canvas, pixelCount, quality) {\n    const ctx = canvas.getContext('2d');\n    const imgData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n    return createPixelArray(imgData.data, pixelCount, quality);\n}\n\nfunction createPixelArray(pixels, pixelCount, quality) {\n    const pixelArray = [];\n    \n    for (let i = 0, offset, r, g, b; i < pixelCount; i = i + quality) {\n    // for (let i = 0, offset, r, g, b, a; i < pixelCount; i = i + quality) {\n        offset = i * 4;\n        r = pixels[offset];\n        g = pixels[offset + 1];\n        b = pixels[offset + 2];\n        // a = pixels[offset + 3]; // Unused because flag has no opaque... I think\n        \n        pixelArray.push([r, g, b]);\n    }\n    return pixelArray;\n}\n\nfunction rgb2hex(rgb) {\n    return \"#\" + rgb.map(function (value) {\n        return (\"0\" + value.toString(16)).slice(-2);\n    }).join(\"\");\n}\n","import * as svgson from 'svgson';\nimport shuffle from 'shuffle-array';\n\nconst SVG_WIDTH = 1600;\nconst SVG_HEIGHT = 900;\n\n// Root SVG element\nconst SVG_ROOT_TEMPLATE = {\n    name: 'svg',\n    type: 'element',\n    value: '',\n    attributes: {\n        xmlns: \"http://www.w3.org/2000/svg\",\n        version: \"1.1\",\n        width: SVG_WIDTH,\n        height: SVG_HEIGHT,\n    },\n    children: [\n        {\n            name: \"rect\",\n            type: \"element\",\n            value: '',\n            attributes: {\n                x: 0,\n                y: 0,\n                width: SVG_WIDTH,\n                height: SVG_HEIGHT,\n                fill: \"#FFFFFF\" // Background color is white\n            },\n            children: [],\n        }\n    ]\n}\n\nconst SVG_RECT_TEMPLATE = {\n    name: \"rect\",\n    type: \"element\",\n    value: '',\n    attributes: null,\n    children: [],\n};\n\n/**\n * Draw each color by same height and length without white\n */\nexport function generate1(isHorizontalBorder, colorList) {\n    // Filter colors without white and shuffle colors\n    const colors = shuffle(colorList.filter(v => v.toUpperCase() !== '#FFFFFF'));\n    \n    // Calculate white color size and each color's size\n    const baseLength = isHorizontalBorder ? SVG_HEIGHT : SVG_WIDTH;\n    const whiteColorLen = baseLength / colors.length * 0.25;\n    const eachColorLen = (baseLength - (whiteColorLen * (colors.length - 1))) / colors.length;\n    \n    const root = deepCopy(SVG_ROOT_TEMPLATE);\n    for (let i = 0; i < colors.length; i++) {\n        const rect = deepCopy(SVG_RECT_TEMPLATE);\n        rect.attributes = {\n            x: isHorizontalBorder ? 0 : i * eachColorLen + i * whiteColorLen,\n            y: isHorizontalBorder ? i * eachColorLen + i * whiteColorLen : 0,\n            width: isHorizontalBorder ? SVG_WIDTH : eachColorLen,\n            height: isHorizontalBorder ? eachColorLen : SVG_HEIGHT,\n            fill: colors[i],\n        };\n        root.children.push(rect);\n    }\n\n    return svgson.stringify(root);\n}\n\nexport function generate2(isHorizontalBorder, flagAndColorDataList) {\n    // Retrieve color and filling rate on flag without white\n    let colorAndAreaRateList = [];\n    flagAndColorDataList.map((flagAndColorData) => {\n        const colorDataList = flagAndColorData.colorData.filter(v => v.color.toUpperCase() !== '#FFFFFF');\n        colorDataList.map((v) => {\n            colorAndAreaRateList.push({color: v.color, area: v.area});\n        });\n    });\n    colorAndAreaRateList = shuffle(colorAndAreaRateList);\n    \n    // Calculate white color length and another colors total length\n    const baseLength = isHorizontalBorder ? SVG_HEIGHT : SVG_WIDTH;\n    const whiteColorLen = baseLength / colorAndAreaRateList.length * 0.25;\n    const colorsTotalLen = baseLength - (colorAndAreaRateList.length - 1) * whiteColorLen;\n    \n    // Calculate color fill rate\n    const totalArea = colorAndAreaRateList.reduce((total, value) => total + value.area, 0);\n    for (let i = 0; i < colorAndAreaRateList.length; i++) {\n        colorAndAreaRateList[i].fillRate = colorAndAreaRateList[i].area / totalArea;\n    }\n    \n    const root = deepCopy(SVG_ROOT_TEMPLATE);\n    let colorLenTotal = 0;\n    for (let i = 0; i < colorAndAreaRateList.length; i++) {\n        const rect = deepCopy(SVG_RECT_TEMPLATE);\n        const colorLen = Math.round(colorsTotalLen * colorAndAreaRateList[i].fillRate);\n        rect.attributes = {\n            x: isHorizontalBorder ? 0 : colorLenTotal + i * whiteColorLen,\n            y: isHorizontalBorder ? colorLenTotal + i * whiteColorLen : 0,\n            width: isHorizontalBorder ? SVG_WIDTH : colorLen,\n            height: isHorizontalBorder ? colorLen : SVG_HEIGHT,\n            fill: colorAndAreaRateList[i].color,\n        };\n        colorLenTotal += colorLen;\n        root.children.push(rect);\n    }\n    \n    return svgson.stringify(root);\n}\n\nexport function tidyCanvasElement(canvas, width) {\n    // Modify display size based on the canvas (=svg) size\n    canvas.style.width = width + 'px';\n    canvas.style.height = (canvas.height * width / canvas.width) + 'px';\n    canvas.style.border = \"1px solid gray\";\n}\n\nfunction deepCopy(org) {\n    return JSON.parse(JSON.stringify(org));\n}\n","import { useState, useEffect } from \"react\";\nimport Canvg from 'canvg';\nimport ReactGA from 'react-ga';\nimport FlagsData from \"./FlagsData\";\nimport * as ImageDetermine from \"./ImageDetermine\";\nimport * as FlagGen from \"./FlagGenerator\";\n\nconst CANVAS_FLAG_WIDTH = 120;\n\nfunction MashupFlags() {\n    const [flagsData, setFlagsData] = useState([]);\n    const [selectedFlagsData, setSelectedFlagsData] = useState([]);\n    const [selectedFlagsColorData, setSelectedFlagsColorData] = useState([]);\n    \n    // When page load complete\n    useEffect(() => {\n        FlagsData.getAllNationalFlags().then((data) => {\n            setFlagsData(data.data);\n        });\n    }, []);\n    \n    // When selected flags\n    useEffect(() => {\n        // console.log(selectedFlagsData);\n    \n        // Draw flag SVG image to the canvas for image manipulating\n        selectedFlagsData.forEach((flagData) => {\n            const canvas = document.getElementById('canvas_' + flagData.alpha3Code);\n            const ctx = canvas.getContext('2d');\n            Canvg.from(ctx, flagData.flag).then((canvg) => {\n                canvg.render().then(() => { FlagGen.tidyCanvasElement(canvas, CANVAS_FLAG_WIDTH) })\n            });\n        });\n    }, [selectedFlagsData]);\n    \n    // Create TR country node\n    const createCountryTr = (flagData) => {\n        // When countries table selected\n        const onCountryRowClick = () => {\n            if (selectedFlagsData.indexOf(flagData) >= 0) {\n                // Remove\n                setSelectedFlagsData(selectedFlagsData.filter(v => flagData !== v));\n            } else {\n                // Add\n                setSelectedFlagsData([...selectedFlagsData, flagData]);\n            }\n        }\n        \n        // Check if this country is in selected list\n        let isSelected = false;\n        if (selectedFlagsData.indexOf(flagData) >= 0) {\n            isSelected = true;\n        }\n    \n        return (\n            <tr key={flagData.alpha3Code}\n                onClick={() => { onCountryRowClick(); }}\n                className={isSelected ? 'is-selected' : ''}\n            >\n                <td>{flagData.name}</td>\n            </tr>\n        );\n    }\n    \n    // When analyze color button pressed\n    const onAnalyzeColorsButtonPressed = () => {\n        const newSelectedFlagsColorData  = [];\n        selectedFlagsData.forEach((flagData) => {\n            newSelectedFlagsColorData.push({\n                flagData: flagData,\n                colorData: ImageDetermine.getImageColorData(document.getElementById('canvas_' + flagData.alpha3Code)),\n            });\n        });\n        setSelectedFlagsColorData(newSelectedFlagsColorData);\n    };\n    \n    // When generate1 flags button pressed\n    const onGenerateFlagsButtonPressed = (isHorizontalBorder = false) => {\n        ReactGA.event({\n            category: 'Flags',\n            action: 'Generate new mashup flags'\n        });\n        \n        const drawCanvas = (canvasId, svg) => {\n            const canvas = document.getElementById(canvasId);\n            const ctx = canvas.getContext('2d');\n            Canvg.from(ctx, svg).then((canvg) => {\n                canvg.render().then(() => { FlagGen.tidyCanvasElement(canvas, CANVAS_FLAG_WIDTH) })\n            });\n        };\n        \n        // Pattern 1\n        const colors = []\n        selectedFlagsColorData.map((flagsData) => {\n            flagsData.colorData.map((colorData) => {\n                colors.push(colorData.color);\n            });\n        });\n        drawCanvas('canvas_generated_1', FlagGen.generate1(isHorizontalBorder, colors));\n        \n        // Pattern 2\n        drawCanvas('canvas_generated_2', FlagGen.generate2(isHorizontalBorder, selectedFlagsColorData));\n    };\n    \n    return (\n        <div className=\"columns\">\n            <div className=\"column\">\n                <strong>Select countries</strong>\n                <div className=\"table-container\" style={{height:\"18rem\",overflowY:\"scroll\"}}>\n                    <table className=\"table is-bordered is-striped is-narrow is-hoverable\">\n                        <tbody>\n                        {flagsData.map((flagData) => { return createCountryTr(flagData) })}\n                        </tbody>\n                    </table>\n                </div>\n            </div>\n            \n            <div className=\"column\">\n                <strong>Selected countries</strong>\n                <br/>\n                <button\n                    onClick={onAnalyzeColorsButtonPressed}\n                    className=\"button is-small is-primary is-outlined\">Analyze colors</button>\n                \n                {selectedFlagsData.map((flagData) =>\n                    <div key={\"selected_\" + flagData.alpha3Code}>\n                        <h4>{flagData.name}</h4>\n                        <canvas id={\"canvas_\" + flagData.alpha3Code} />\n                    </div>\n                )}\n            </div>\n            \n            <div className=\"column\">\n                <strong>Selected flags color data</strong>\n                <br/>\n                <button onClick={() => onGenerateFlagsButtonPressed(true)}\n                        className=\"button is-small is-primary is-outlined\">Generate H flags</button>\n                <button onClick={() => onGenerateFlagsButtonPressed(false)}\n                        className=\"button is-small is-primary is-outlined\">Generate V flags</button>\n                \n                {selectedFlagsColorData.map((flagDataAndColorData) =>\n                    <div key={\"selected_analyzed_\" + flagDataAndColorData.flagData.alpha3Code}>\n                        <h4>{flagDataAndColorData.flagData.name}</h4>\n                        <div>\n                            {flagDataAndColorData.colorData.map(colorData => (\n                                <div key={\"color_sample_\" + flagDataAndColorData.flagData.alpha3Code + \"_\" + colorData.color}>\n                                    <span style={{border:\"1px solid gray\", backgroundColor:colorData.color}}>&nbsp;&nbsp;&nbsp;&nbsp;</span>\n                                    <span> {colorData.color}, {Math.round(colorData.area * 100)}%</span>\n                                </div>\n                            ))}\n                        </div>\n                        <hr style={{margin:0,marginBottom:'1rem'}}/>\n                    </div>\n                )}\n            </div>\n            \n            <div className=\"column\">\n                <strong>Generated mashup flags</strong>\n                <br/>\n                <button\n                    onClick={() => onGenerateFlagsButtonPressed(true)}\n                    className=\"button is-small is-primary is-outlined\">Re-generate H</button>\n                <button\n                    onClick={() => onGenerateFlagsButtonPressed(false)}\n                    className=\"button is-small is-primary is-outlined\">Re-generate V</button>\n                <div>\n                    <div>\n                        <h4>Pattern 1</h4>\n                        <canvas id=\"canvas_generated_1\" />\n                    </div>\n                    <div>\n                        <h4>Pattern 2</h4>\n                        <canvas id=\"canvas_generated_2\" />\n                    </div>\n                </div>\n            </div>\n        </div>\n    );\n}\n\nexport default MashupFlags;\n","import {useEffect} from \"react\";\nimport ReactGA from 'react-ga';\nimport MashupFlags from \"./MashupFlags\";\n\nReactGA.initialize('UA-199628575-1');\nReactGA.pageview(window.location.pathname + window.location.search);\n\nfunction App() {\n    useEffect(() => {\n        ReactGA.pageview('/');\n    }, []);\n    \n    return (\n        <div>\n            <section className=\"hero is-dark\">\n                <div className=\"hero-body\">\n                    <div className=\"container\">\n                        <h1 className=\"title\">[WIP]National Diversity Barcodes</h1>\n                    </div>\n                </div>\n            </section>\n            \n            <section className=\"section\">\n                <div className=\"container \">\n                    <MashupFlags/>\n                </div>\n            </section>\n    \n            <footer className=\"footer\">\n                <div className=\"content has-text-centered\">\n                    ConnectionWorks Inc.\n                </div>\n            </footer>\n        </div>\n    );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bulma/css/bulma.min.css';\nimport App from './App';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App/>\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n"],"sourceRoot":""}